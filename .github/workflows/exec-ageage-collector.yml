name: Exec Ageage Collector

on:
  workflow_dispatch: # 手動実行用
  schedule:
    - cron: "0 23 * * SUN" # 日曜日の23時に実行

permissions:
  contents: "read"
  id-token: "write"

env:
  # 例. projects/<プロジェクト番号>/locations/global/workloadIdentityPools/<プールID>/providers/github
  # projects/999999999999/locations/global/workloadIdentityPools/my-pool-id/providers/github
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  RUN_SERVICE_ACCOUNT: ${{ secrets.RUN_SERVICE_ACCOUNT }}
  IMAGE_HOST: "asia-northeast1-docker.pkg.dev"
  IMAGE_TAG_BASE: ${{ secrets.AGE_IMAGE_TAG_BASE }} # 例. プロジェクトID/artifact_registry名/イメージ名
  GCP_REGION: asia-northeast1
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  exec-ageage-collector:
    runs-on: ubuntu-latest

    steps:
      - uses: Kesin11/actions-timeline@v2
      - name: Checkout
        uses: actions/checkout@v4

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Exec Ageage Collector
        id: ageage-collector
        run: |
          gcloud config set run/region $GCP_REGION
          set +e
          gcloud run jobs describe ageagecli --quiet >/dev/null
          job_exists_check=$?
          set -e
          if [ $job_exists_check -eq 0 ]; then
          jobs_cmd="update"
          else
          jobs_cmd="create"
          fi
          echo ": $jobs_cmd a job"
          gcloud run jobs $jobs_cmd ageagecli --image="${{ env.IMAGE_HOST }}/${{ env.IMAGE_TAG_BASE }}:latest" --max-retries=1 --service-account="${{ env.RUN_SERVICE_ACCOUNT }}" --set-secrets="DSN=DATABASE_URL:latest"
          gcloud run jobs execute ageagecli --wait --format=json

  vercle-deploy:
    needs: exec-ageage-collector
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ env.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}
